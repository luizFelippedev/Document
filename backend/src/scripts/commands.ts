import { Command } from 'commander';
import { connectDB } from '../config/db';
import redisClient from '../config/redis';
import User from '../api/models/user.model';
import Project from '../api/models/project.model';
import Certificate from '../api/models/certificate.model';
import { backupService } from './backup';
import { queueManager } from '../jobs/queue-manager';
import logger from '../config/logger';

const program = new Command();

program
  .name('portfolio-cli')
  .description('CLI para gerenciamento do Portfolio Manager')
  .version('1.0.0');

// Comando para criar usu√°rio admin
program
  .command('create-admin')
  .description('Criar usu√°rio administrador')
  .requiredOption('-e, --email <email>', 'Email do administrador')
  .requiredOption('-p, --password <password>', 'Senha do administrador')
  .option('-n, --name <name>', 'Nome completo', 'Admin User')
  .action(async (options) => {
    try {
      await connectDB();
      
      const [firstName, ...lastNameParts] = options.name.split(' ');
      const lastName = lastNameParts.join(' ') || 'User';
      
      const existingUser = await User.findOne({ email: options.email });
      if (existingUser) {
        console.error('‚ùå Usu√°rio com este email j√° existe');
        process.exit(1);
      }
      
      const admin = await User.create({
        email: options.email,
        password: options.password,
        firstName,
        lastName,
        role: 'admin',
        verified: true,
        active: true,
      });
      
      console.log('‚úÖ Usu√°rio administrador criado com sucesso:');
      console.log(`   Email: ${admin.email}`);
      console.log(`   ID: ${admin._id}`);
      console.log(`   Nome: ${admin.firstName} ${admin.lastName}`);
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro ao criar administrador:', error);
      process.exit(1);
    }
  });

// Comando para reset de senha
program
  .command('reset-password')
  .description('Resetar senha de usu√°rio')
  .requiredOption('-e, --email <email>', 'Email do usu√°rio')
  .requiredOption('-p, --password <password>', 'Nova senha')
  .action(async (options) => {
    try {
      await connectDB();
      
      const user = await User.findOne({ email: options.email });
      if (!user) {
        console.error('‚ùå Usu√°rio n√£o encontrado');
        process.exit(1);
      }
      
      user.password = options.password;
      user.loginAttempts = 0;
      user.lockUntil = undefined;
      await user.save();
      
      console.log('‚úÖ Senha resetada com sucesso');
      console.log(`   Usu√°rio: ${user.email}`);
      console.log(`   Nome: ${user.firstName} ${user.lastName}`);
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro ao resetar senha:', error);
      process.exit(1);
    }
  });

// Comando para estat√≠sticas do sistema
program
  .command('stats')
  .description('Mostrar estat√≠sticas do sistema')
  .action(async () => {
    try {
      await connectDB();
      await redisClient.connect();
      
      const [
        totalUsers,
        activeUsers,
        totalProjects,
        totalCertificates,
        recentProjects,
        recentUsers,
      ] = await Promise.all([
        User.countDocuments(),
        User.countDocuments({ active: true }),
        Project.countDocuments(),
        Certificate.countDocuments(),
        Project.countDocuments({
          createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        }),
        User.countDocuments({
          createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        }),
      ]);
      
      console.log('\nüìä Estat√≠sticas do Sistema:');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log(`üë• Usu√°rios:`);
      console.log(`   Total: ${totalUsers}`);
      console.log(`   Ativos: ${activeUsers}`);
      console.log(`   Novos (7 dias): ${recentUsers}`);
      console.log();
      console.log(`üìÅ Projetos:`);
      console.log(`   Total: ${totalProjects}`);
      console.log(`   Novos (7 dias): ${recentProjects}`);
      console.log();
      console.log(`üèÜ Certificados:`);
      console.log(`   Total: ${totalCertificates}`);
      
      // Estat√≠sticas de mem√≥ria
      const memUsage = process.memoryUsage();
      console.log();
      console.log(`üíæ Mem√≥ria:`);
      console.log(`   RSS: ${Math.round(memUsage.rss / 1024 / 1024)} MB`);
      console.log(`   Heap: ${Math.round(memUsage.heapUsed / 1024 / 1024)} MB`);
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      process.exit(1);
    }
  });

// Comando para backup
program
  .command('backup')
  .description('Executar backup do sistema')
  .option('-d, --database-only', 'Apenas backup do banco de dados')
  .option('-f, --files-only', 'Apenas backup dos arquivos')
  .action(async (options) => {
    try {
      console.log('üîÑ Iniciando backup...');
      
      if (options.databaseOnly) {
        const result = await backupService.backupMongoDB();
        console.log(`‚úÖ Backup do banco de dados conclu√≠do: ${result}`);
      } else if (options.filesOnly) {
        const result = await backupService.backupUploads();
        console.log(`‚úÖ Backup dos arquivos conclu√≠do: ${result}`);
      } else {
        const result = await backupService.performFullBackup();
        console.log('‚úÖ Backup completo conclu√≠do:');
        console.log(`   MongoDB: ${result.mongodb}`);
        console.log(`   Arquivos: ${result.uploads}`);
        console.log(`   Dura√ß√£o: ${result.duration}ms`);
      }
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro no backup:', error);
      process.exit(1);
    }
  });

// Comando para limpeza
program
  .command('cleanup')
  .description('Executar limpeza do sistema')
  .option('-c, --cache', 'Limpar cache')
  .option('-l, --logs', 'Limpar logs antigos')
  .option('-f, --files', 'Limpar arquivos tempor√°rios')
  .option('-a, --all', 'Limpar tudo')
  .action(async (options) => {
    try {
      console.log('üßπ Iniciando limpeza...');
      
      if (options.cache || options.all) {
        await redisClient.connect();
        // Implementar limpeza de cache
        console.log('‚úÖ Cache limpo');
      }
      
      if (options.logs || options.all) {
        // Implementar limpeza de logs
        console.log('‚úÖ Logs antigos removidos');
      }
      
      if (options.files || options.all) {
        // Implementar limpeza de arquivos tempor√°rios
        console.log('‚úÖ Arquivos tempor√°rios removidos');
      }
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro na limpeza:', error);
      process.exit(1);
    }
  });

// Comando para status das filas
program
  .command('queue-stats')
  .description('Mostrar estat√≠sticas das filas')
  .action(async () => {
    try {
      await redisClient.connect();
      
      const stats = await queueManager.getAllQueueStats();
      
      console.log('\nüìä Estat√≠sticas das Filas:');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      
      for (const stat of stats) {
        console.log(`\nüìã ${stat.name}:`);
        console.log(`   Aguardando: ${stat.waiting}`);
        console.log(`   Processando: ${stat.active}`);
        console.log(`   Conclu√≠dos: ${stat.completed}`);
        console.log(`   Falhados: ${stat.failed}`);
        console.log(`   Atrasados: ${stat.delayed}`);
        console.log(`   Status: ${stat.paused ? '‚è∏Ô∏è  Pausada' : '‚ñ∂Ô∏è  Ativa'}`);
      }
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas das filas:', error);
      process.exit(1);
    }
  });

// Comando para verificar sa√∫de do sistema
program
  .command('health')
  .description('Verificar sa√∫de do sistema')
  .action(async () => {
    try {
      console.log('üè• Verificando sa√∫de do sistema...\n');
      
      // Verificar MongoDB
      try {
        await connectDB();
        console.log('‚úÖ MongoDB: Conectado');
      } catch (error) {
        console.log('‚ùå MongoDB: Erro de conex√£o');
      }
      
      // Verificar Redis
      try {
        await redisClient.connect();
        console.log('‚úÖ Redis: Conectado');
      } catch (error) {
        console.log('‚ùå Redis: Erro de conex√£o');
      }
      
      // Verificar filas
      try {
        const health = await queueManager.healthCheck();
        if (health.healthy) {
          console.log('‚úÖ Filas: Saud√°veis');
        } else {
          console.log('‚ö†Ô∏è  Filas: Problemas detectados');
          health.issues.forEach(issue => console.log(`   - ${issue}`));
        }
      } catch (error) {
        console.log('‚ùå Filas: Erro na verifica√ß√£o');
      }
      
      // Verificar espa√ßo em disco
      try {
        const { execSync } = require('child_process');
        const diskUsage = execSync('df -h /').toString();
        console.log('‚úÖ Espa√ßo em disco: Dispon√≠vel');
      } catch (error) {
        console.log('‚ö†Ô∏è  Espa√ßo em disco: Erro na verifica√ß√£o');
      }
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o de sa√∫de:', error);
      process.exit(1);
    }
  });

// Executar programa
if (require.main === module) {
  program.parse();
}

export default program;